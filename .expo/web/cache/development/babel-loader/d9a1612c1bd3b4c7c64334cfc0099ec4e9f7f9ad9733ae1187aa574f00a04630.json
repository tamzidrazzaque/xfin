{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nexport default function useCachedResources(images, fonts) {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isLoadingComplete = _React$useState2[0],\n    setLoadingComplete = _React$useState2[1];\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n    function _loadResourcesAndDataAsync() {\n      _loadResourcesAndDataAsync = _asyncToGenerator(function* () {\n        try {\n          yield Promise.all([images && Asset.loadAsync(images), Font.loadAsync(_objectSpread(_objectSpread({}, Ionicons.font), {}, {\n            Ubuntu_300Light: require(\"../fonts/Ubuntu_300Light.ttf\"),\n            Ubuntu_300Light_Italic: require(\"../fonts/Ubuntu_300Light_Italic.ttf\"),\n            Ubuntu_400Regular: require(\"../fonts/Ubuntu_400Regular.ttf\"),\n            Ubuntu_400Regular_Italic: require(\"../fonts/Ubuntu_400Regular_Italic.ttf\"),\n            Ubuntu_500Medium: require(\"../fonts/Ubuntu_500Medium.ttf\"),\n            Ubuntu_500Medium_Italic: require(\"../fonts/Ubuntu_500Medium_Italic.ttf\"),\n            Ubuntu_700Bold: require(\"../fonts/Ubuntu_700Bold.ttf\"),\n            Ubuntu_700Bold_Italic: require(\"../fonts/Ubuntu_700Bold_Italic.ttf\")\n          }, fonts))]);\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          setLoadingComplete(true);\n        }\n      });\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"names":["React","Ionicons","Font","Asset","useCachedResources","images","fonts","_React$useState","useState","_React$useState2","_slicedToArray","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","_loadResourcesAndDataAsync","apply","arguments","_asyncToGenerator","Promise","all","loadAsync","_objectSpread","font","Ubuntu_300Light","require","Ubuntu_300Light_Italic","Ubuntu_400Regular","Ubuntu_400Regular_Italic","Ubuntu_500Medium","Ubuntu_500Medium_Italic","Ubuntu_700Bold","Ubuntu_700Bold_Italic","e","console","warn"],"sources":["/Users/tamzidrazzaque/Documents/Xfin_testing/node_modules/react-native-rapi-ui/hooks/useCachedResources.ts"],"sourcesContent":["import * as React from 'react';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport * as Font from 'expo-font';\r\n\r\nimport { Asset } from 'expo-asset';\r\n\r\nexport default function useCachedResources(\r\n\timages?: Array<any> | null,\r\n\tfonts?: any\r\n) {\r\n\tconst [isLoadingComplete, setLoadingComplete] = React.useState(false);\r\n\r\n\t// Load any resources or data that we need prior to rendering the app\r\n\tReact.useEffect(() => {\r\n\t\tasync function loadResourcesAndDataAsync() {\r\n\t\t\ttry {\r\n\t\t\t\t// Load fonts\r\n\t\t\t\tawait Promise.all([\r\n\t\t\t\t\timages && Asset.loadAsync(images),\r\n\t\t\t\t\tFont.loadAsync({\r\n\t\t\t\t\t\t...Ionicons.font,\r\n\t\t\t\t\t\tUbuntu_300Light: require('../fonts/Ubuntu_300Light.ttf'),\r\n\t\t\t\t\t\tUbuntu_300Light_Italic: require('../fonts/Ubuntu_300Light_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_400Regular: require('../fonts/Ubuntu_400Regular.ttf'),\r\n\t\t\t\t\t\tUbuntu_400Regular_Italic: require('../fonts/Ubuntu_400Regular_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_500Medium: require('../fonts/Ubuntu_500Medium.ttf'),\r\n\t\t\t\t\t\tUbuntu_500Medium_Italic: require('../fonts/Ubuntu_500Medium_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_700Bold: require('../fonts/Ubuntu_700Bold.ttf'),\r\n\t\t\t\t\t\tUbuntu_700Bold_Italic: require('../fonts/Ubuntu_700Bold_Italic.ttf'),\r\n\t\t\t\t\t\t...fonts,\r\n\t\t\t\t\t}),\r\n\t\t\t\t]);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// We might want to provide this error information to an error reporting service\r\n\t\t\t\tconsole.warn(e);\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoadingComplete(true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloadResourcesAndDataAsync();\r\n\t}, []);\r\n\r\n\treturn isLoadingComplete;\r\n}\r\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAO,KAAKC,IAAI,MAAM,WAAW;AAEjC,SAASC,KAAK,QAAQ,YAAY;AAElC,eAAe,SAASC,kBAAkBA,CACzCC,MAA0B,EAC1BC,KAAW,EACV;EACD,IAAAC,eAAA,GAAgDP,KAAK,CAACQ,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA9DI,iBAAiB,GAAAF,gBAAA;IAAEG,kBAAkB,GAAAH,gBAAA;EAG5CT,KAAK,CAACa,SAAS,CAAC,YAAM;IAAA,SACNC,yBAAyBA,CAAA;MAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAAA,SAAAF,2BAAA;MAAAA,0BAAA,GAAAG,iBAAA,CAAxC,aAA2C;QAC1C,IAAI;UAEH,MAAMC,OAAO,CAACC,GAAG,CAAC,CACjBf,MAAM,IAAIF,KAAK,CAACkB,SAAS,CAAChB,MAAM,CAAC,EACjCH,IAAI,CAACmB,SAAS,CAAAC,aAAA,CAAAA,aAAA,KACVrB,QAAQ,CAACsB,IAAI;YAChBC,eAAe,EAAEC,OAAO,+BAA+B,CAAC;YACxDC,sBAAsB,EAAED,OAAO,sCAAsC,CAAC;YACtEE,iBAAiB,EAAEF,OAAO,iCAAiC,CAAC;YAC5DG,wBAAwB,EAAEH,OAAO,wCAAwC,CAAC;YAC1EI,gBAAgB,EAAEJ,OAAO,gCAAgC,CAAC;YAC1DK,uBAAuB,EAAEL,OAAO,uCAAuC,CAAC;YACxEM,cAAc,EAAEN,OAAO,8BAA8B,CAAC;YACtDO,qBAAqB,EAAEP,OAAO,qCAAqC;UAAC,GACjEnB,KAAK,CACR,CAAC,CACF,CAAC;QACH,CAAC,CAAC,OAAO2B,CAAC,EAAE;UAEXC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;QAChB,CAAC,SAAS;UACTrB,kBAAkB,CAAC,IAAI,CAAC;QACzB;MACD,CAAC;MAAA,OAAAG,0BAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAEDH,yBAAyB,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOH,iBAAiB;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}