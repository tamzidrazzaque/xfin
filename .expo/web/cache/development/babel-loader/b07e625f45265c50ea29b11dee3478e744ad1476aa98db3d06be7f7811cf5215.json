{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { component, themeColor } from \"../constants/colors\";\nimport useCachedResources from \"../hooks/useCachedResources\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThemeContext = React.createContext({\n  theme: \"light\",\n  setTheme: function setTheme(theme) {\n    return console.warn(\"no theme provider\");\n  }\n});\nvar useTheme = function useTheme() {\n  return React.useContext(ThemeContext);\n};\nvar ThemeProvider = function ThemeProvider(props) {\n  var _React$useState = React.useState(props.theme || \"light\"),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    theme = _React$useState2[0],\n    setTheme = _React$useState2[1];\n  var isLoadingComplete = useCachedResources(props.images, props.fonts);\n  var isDarkmode = theme === \"dark\";\n  return _jsxs(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      isDarkmode: isDarkmode,\n      setTheme: setTheme\n    },\n    children: [_jsx(StatusBar, {\n      backgroundColor: component[theme].statusBar.color,\n      barStyle: isDarkmode ? \"light-content\" : \"dark-content\"\n    }), _jsx(SafeAreaProvider, {\n      style: {\n        backgroundColor: isDarkmode ? themeColor.dark : themeColor.white100\n      },\n      children: !isLoadingComplete ? props.loading ? props.loading : null : props.children\n    })]\n  });\n};\nexport { ThemeProvider, ThemeContext, useTheme };","map":{"version":3,"names":["React","StatusBar","SafeAreaProvider","component","themeColor","useCachedResources","jsx","_jsx","jsxs","_jsxs","ThemeContext","createContext","theme","setTheme","console","warn","useTheme","useContext","ThemeProvider","props","_React$useState","useState","_React$useState2","_slicedToArray","isLoadingComplete","images","fonts","isDarkmode","Provider","value","children","backgroundColor","statusBar","color","barStyle","style","dark","white100","loading"],"sources":["/Users/tamzidrazzaque/Documents/Xfin_testing/node_modules/react-native-rapi-ui/provider/ThemeProvider.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { StatusBar } from \"react-native\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport { component, themeColor } from \"../constants/colors\";\r\nimport useCachedResources from \"../hooks/useCachedResources\";\r\n\r\ntype ContextProps = {\r\n  theme: \"light\" | \"dark\";\r\n  setTheme: (theme: \"light\" | \"dark\") => void;\r\n  isDarkmode?: boolean;\r\n  images?: Array<any> | null;\r\n  fonts?: any;\r\n};\r\n\r\nconst ThemeContext = React.createContext<ContextProps>({\r\n  theme: \"light\",\r\n  setTheme: (theme) => console.warn(\"no theme provider\"),\r\n});\r\n\r\nconst useTheme = () => React.useContext(ThemeContext);\r\n\r\nconst ThemeProvider = (props: {\r\n  theme?: \"light\" | \"dark\";\r\n  isDarkmode?: boolean;\r\n  images?: Array<any> | null;\r\n  fonts?: any;\r\n  children?: React.ReactNode;\r\n  loading?: React.ReactNode;\r\n}) => {\r\n  const [theme, setTheme] = React.useState<\"light\" | \"dark\">(\r\n    props.theme || \"light\"\r\n  );\r\n  const isLoadingComplete = useCachedResources(props.images, props.fonts);\r\n  const isDarkmode = theme === \"dark\";\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, isDarkmode, setTheme }}>\r\n      <StatusBar\r\n        backgroundColor={component[theme].statusBar.color}\r\n        barStyle={isDarkmode ? \"light-content\" : \"dark-content\"}\r\n      />\r\n      <SafeAreaProvider\r\n        style={{\r\n          backgroundColor: isDarkmode ? themeColor.dark : themeColor.white100,\r\n        }}\r\n      >\r\n        {!isLoadingComplete\r\n          ? props.loading\r\n            ? props.loading\r\n            : null\r\n          : props.children}\r\n      </SafeAreaProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThemeProvider, ThemeContext, useTheme, ContextProps };\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,SAAA;AAE1B,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,SAAS,EAAEC,UAAU;AAC9B,OAAOC,kBAAkB;AAAoC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAU7D,IAAMC,YAAY,GAAGV,KAAK,CAACW,aAAa,CAAe;EACrDC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE,SAAAA,SAACD,KAAK;IAAA,OAAKE,OAAO,CAACC,IAAI,CAAC,mBAAmB,CAAC;EAAA;AACxD,CAAC,CAAC;AAEF,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAA;EAAA,OAAShB,KAAK,CAACiB,UAAU,CAACP,YAAY,CAAC;AAAA;AAErD,IAAMQ,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAOtB,EAAK;EACJ,IAAAC,eAAA,GAA0BpB,KAAK,CAACqB,QAAQ,CACtCF,KAAK,CAACP,KAAK,IAAI,OACjB,CAAC;IAAAU,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAFMR,KAAK,GAAAU,gBAAA;IAAET,QAAQ,GAAAS,gBAAA;EAGtB,IAAME,iBAAiB,GAAGnB,kBAAkB,CAACc,KAAK,CAACM,MAAM,EAAEN,KAAK,CAACO,KAAK,CAAC;EACvE,IAAMC,UAAU,GAAGf,KAAK,KAAK,MAAM;EAEnC,OACEH,KAAA,CAACC,YAAY,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,KAAK,EAALA,KAAK;MAAEe,UAAU,EAAVA,UAAU;MAAEd,QAAQ,EAARA;IAAS,CAAE;IAAAiB,QAAA,GAC5DvB,IAAA,CAACN,SAAS;MACR8B,eAAe,EAAE5B,SAAS,CAACS,KAAK,CAAC,CAACoB,SAAS,CAACC,KAAM;MAClDC,QAAQ,EAAEP,UAAU,GAAG,eAAe,GAAG;IAAe,CACzD,CAAC,EACFpB,IAAA,CAACL,gBAAgB;MACfiC,KAAK,EAAE;QACLJ,eAAe,EAAEJ,UAAU,GAAGvB,UAAU,CAACgC,IAAI,GAAGhC,UAAU,CAACiC;MAC7D,CAAE;MAAAP,QAAA,EAED,CAACN,iBAAiB,GACfL,KAAK,CAACmB,OAAO,GACXnB,KAAK,CAACmB,OAAO,GACb,IAAI,GACNnB,KAAK,CAACW;IAAQ,CACF,CAAC;EAAA,CACE,CAAC;AAE5B,CAAC;AAED,SAASZ,aAAa,EAAER,YAAY,EAAEM,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}