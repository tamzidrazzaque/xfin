{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { themeColor, component } from \"../../constants/colors\";\nimport { fontSize, normal, italic } from \"../../constants/typography\";\nimport { useTheme } from \"../../provider/ThemeProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar StyledText = function StyledText(props) {\n  var _props$style3, _props$style4;\n  var _useTheme = useTheme(),\n    theme = _useTheme.theme;\n  var font = function font() {\n    if (props.italic) {\n      if (props.fontWeight) {\n        return italic[props.fontWeight];\n      }\n      return italic.regular;\n    } else {\n      if (props.fontWeight) {\n        return normal[props.fontWeight];\n      }\n      return normal.regular;\n    }\n  };\n  var size = function size() {\n    var _props$style;\n    if ((_props$style = props.style) != null && _props$style.fontSize) {\n      var _props$style2;\n      return (_props$style2 = props.style) == null ? void 0 : _props$style2.fontSize;\n    } else {\n      return props.size ? fontSize[props.size] : fontSize.lg;\n    }\n  };\n  return _jsx(Text, _objectSpread(_objectSpread({}, props), {}, {\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      fontFamily: font(),\n      fontSize: size(),\n      color: props.status ? themeColor[props.status] : (_props$style3 = props.style) != null && _props$style3.color ? (_props$style4 = props.style) == null ? void 0 : _props$style4.color : component[theme].text.color\n    })\n  }));\n};\nexport default StyledText;","map":{"version":3,"names":["React","Text","themeColor","component","fontSize","normal","italic","useTheme","jsx","_jsx","StyledText","props","_props$style3","_props$style4","_useTheme","theme","font","fontWeight","regular","size","_props$style","style","_props$style2","lg","_objectSpread","fontFamily","color","status","text"],"sources":["/Users/tamzidrazzaque/Documents/Xfin_testing/node_modules/react-native-rapi-ui/components/Text/Text.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Text, TextProps, TextStyle } from \"react-native\";\r\nimport { themeColor, component } from \"../../constants/colors\";\r\nimport { fontSize, normal, italic } from \"../../constants/typography\";\r\nimport { useTheme } from \"../../provider/ThemeProvider\";\r\n\r\ninterface Props extends TextProps {\r\n  fontWeight?: keyof typeof normal;\r\n  italic?: boolean;\r\n  size?: keyof typeof fontSize;\r\n  style?: TextStyle;\r\n  status?: \"primary\" | \"success\" | \"warning\" | \"info\" | \"danger\";\r\n}\r\n\r\nconst StyledText: React.FC<Props> = (props: Props) => {\r\n  const { theme } = useTheme();\r\n  const font = () => {\r\n    if (props.italic) {\r\n      if (props.fontWeight) {\r\n        return italic[props.fontWeight];\r\n      }\r\n      return italic.regular;\r\n    } else {\r\n      if (props.fontWeight) {\r\n        return normal[props.fontWeight];\r\n      }\r\n      return normal.regular;\r\n    }\r\n  };\r\n\r\n  const size = () => {\r\n    if (props.style?.fontSize) {\r\n      return props.style?.fontSize;\r\n    } else {\r\n      return props.size ? fontSize[props.size] : fontSize.lg;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Text\r\n      {...props}\r\n      style={{\r\n        ...props.style,\r\n        fontFamily: font(),\r\n        fontSize: size(),\r\n        color: props.status\r\n          ? themeColor[props.status]\r\n          : props.style?.color\r\n          ? props.style?.color\r\n          : component[theme].text.color,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StyledText;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAE1B,SAASC,UAAU,EAAEC,SAAS;AAC9B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,MAAM;AACjC,SAASC,QAAQ;AAAuC,SAAAC,GAAA,IAAAC,IAAA;AAUxD,IAAMC,UAA2B,GAAG,SAA9BA,UAA2BA,CAAIC,KAAY,EAAK;EAAA,IAAAC,aAAA,EAAAC,aAAA;EACpD,IAAAC,SAAA,GAAkBP,QAAQ,CAAC,CAAC;IAApBQ,KAAK,GAAAD,SAAA,CAALC,KAAK;EACb,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;IACjB,IAAIL,KAAK,CAACL,MAAM,EAAE;MAChB,IAAIK,KAAK,CAACM,UAAU,EAAE;QACpB,OAAOX,MAAM,CAACK,KAAK,CAACM,UAAU,CAAC;MACjC;MACA,OAAOX,MAAM,CAACY,OAAO;IACvB,CAAC,MAAM;MACL,IAAIP,KAAK,CAACM,UAAU,EAAE;QACpB,OAAOZ,MAAM,CAACM,KAAK,CAACM,UAAU,CAAC;MACjC;MACA,OAAOZ,MAAM,CAACa,OAAO;IACvB;EACF,CAAC;EAED,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;IAAA,IAAAC,YAAA;IACjB,KAAAA,YAAA,GAAIT,KAAK,CAACU,KAAK,aAAXD,YAAA,CAAahB,QAAQ,EAAE;MAAA,IAAAkB,aAAA;MACzB,QAAAA,aAAA,GAAOX,KAAK,CAACU,KAAK,qBAAXC,aAAA,CAAalB,QAAQ;IAC9B,CAAC,MAAM;MACL,OAAOO,KAAK,CAACQ,IAAI,GAAGf,QAAQ,CAACO,KAAK,CAACQ,IAAI,CAAC,GAAGf,QAAQ,CAACmB,EAAE;IACxD;EACF,CAAC;EAED,OACEd,IAAA,CAACR,IAAI,EAAAuB,aAAA,CAAAA,aAAA,KACCb,KAAK;IACTU,KAAK,EAAAG,aAAA,CAAAA,aAAA,KACAb,KAAK,CAACU,KAAK;MACdI,UAAU,EAAET,IAAI,CAAC,CAAC;MAClBZ,QAAQ,EAAEe,IAAI,CAAC,CAAC;MAChBO,KAAK,EAAEf,KAAK,CAACgB,MAAM,GACfzB,UAAU,CAACS,KAAK,CAACgB,MAAM,CAAC,GACxB,CAAAf,aAAA,GAAAD,KAAK,CAACU,KAAK,aAAXT,aAAA,CAAac,KAAK,IAAAb,aAAA,GAClBF,KAAK,CAACU,KAAK,qBAAXR,aAAA,CAAaa,KAAK,GAClBvB,SAAS,CAACY,KAAK,CAAC,CAACa,IAAI,CAACF;IAAK;EAC/B,EACH,CAAC;AAEN,CAAC;AAED,eAAehB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}