{"ast":null,"code":"var emailRegEx = /^[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\nexport default function (email) {\n  if (!email) {\n    return false;\n  }\n  var emailParts = email.split(\"@\");\n  if (emailParts.length !== 2) {\n    return false;\n  }\n  var account = emailParts[0];\n  var address = emailParts[1];\n  if (account.length > 64) {\n    return false;\n  } else if (address.length > 255) {\n    return false;\n  }\n  var domainParts = address.split(\".\");\n  if (domainParts.some(function (part) {\n    return part.length > 63;\n  })) {\n    return false;\n  }\n  if (!emailRegEx.test(email)) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["emailRegEx","email","emailParts","split","length","account","address","domainParts","some","part","test"],"sources":["/Users/tamzidrazzaque/Documents/Xfin_testing/node_modules/react-native-login-screen/lib/helpers/emailValidator.ts"],"sourcesContent":["const emailRegEx =\n  /^[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\n// Thanks to:\n// This is directly taken from `https://github.com/manishsaraan/email-validator/blob/master/index.js`\n// Just converted to the TypeScript and modernized a bit.\n// ? Local part may be up to 64 octets long and the domain may have a maximum of 255 octets.\nexport default function (email: string): boolean {\n  if (!email) {\n    return false;\n  }\n\n  const emailParts = email.split(\"@\");\n\n  if (emailParts.length !== 2) {\n    return false;\n  }\n\n  const account = emailParts[0];\n  const address = emailParts[1];\n\n  if (account.length > 64) {\n    return false;\n  } else if (address.length > 255) {\n    return false;\n  }\n\n  const domainParts = address.split(\".\");\n  if (\n    domainParts.some(function (part) {\n      return part.length > 63;\n    })\n  ) {\n    return false;\n  }\n\n  if (!emailRegEx.test(email)) {\n    return false;\n  }\n\n  return true;\n}\n"],"mappings":"AAAA,IAAMA,UAAU,GACd,iIAAiI;AAKnI,eAAc,UAAWC,KAAa;EACpC,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,KAAK;;EAGd,IAAMC,UAAU,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAEnC,IAAID,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;IAC3B,OAAO,KAAK;;EAGd,IAAMC,OAAO,GAAGH,UAAU,CAAC,CAAC,CAAC;EAC7B,IAAMI,OAAO,GAAGJ,UAAU,CAAC,CAAC,CAAC;EAE7B,IAAIG,OAAO,CAACD,MAAM,GAAG,EAAE,EAAE;IACvB,OAAO,KAAK;GACb,MAAM,IAAIE,OAAO,CAACF,MAAM,GAAG,GAAG,EAAE;IAC/B,OAAO,KAAK;;EAGd,IAAMG,WAAW,GAAGD,OAAO,CAACH,KAAK,CAAC,GAAG,CAAC;EACtC,IACEI,WAAW,CAACC,IAAI,CAAC,UAAUC,IAAI;IAC7B,OAAOA,IAAI,CAACL,MAAM,GAAG,EAAE;EACzB,CAAC,CAAC,EACF;IACA,OAAO,KAAK;;EAGd,IAAI,CAACJ,UAAU,CAACU,IAAI,CAACT,KAAK,CAAC,EAAE;IAC3B,OAAO,KAAK;;EAGd,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}